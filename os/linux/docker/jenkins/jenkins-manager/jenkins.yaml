jenkins:
  systemMessage: "Jenkins configured automatically by Jenkins Configuration as Code plugin\n\n"
  numExecutors: 10
  scmCheckoutRetryCount: 2

  # The following two lines should prevent any jobs from running on the master unless
  # the job uses the 'jenkins-master' label.
  # Instead, the 'docker cloud' configured below will by default run any build job using
  # the Docker Cloud build agent template.
  mode: EXCLUSIVE # set to NORMAL to allow running any jobs on the master
  labelString: "jenkins-master"

##  globalNodeProperties:
##    - envVars:
##        env:
##          - key: FOO
##            value: BAR

  authorizationStrategy:
    loggedInUsersCanDoAnything:
      allowAnonymousRead: false

  agentProtocols:
  - "JNLP4-connect"
  - "Ping"

  crumbIssuer:
    standard:
      excludeClientIPFromCrumb: false

  disableRememberMe: false
  markupFormatter: "plainText"
  projectNamingStrategy: "standard"
  quietPeriod: 5

  remotingSecurity:
    enabled: true

  securityRealm:
    local:
      allowsSignup: false
      enableCaptcha: false
      users:
      - id: "admin"
        password: "admin"

  primaryView:
    all:
      name: "all"
  views:
  - all:
      name: "all"
  viewsTabBar: "standard"
  myViewsTabBar: "standard"


  clouds:
  - docker:
      dockerApi:
        connectTimeout: 60
        dockerHost:
          # Change this URI to "tcp://host:port" for a remote Docker daemon.
          # If using unix://, make sure the docker.sock file is volume-mounted into
          # the Jenkins Master container at run-time, and that the file is writable
          # by the DOCKER_GID group id built into the Jenkins Master container.
          uri: "unix:///var/run/docker.sock"
        readTimeout: 60
      exposeDockerHost: true
      name: "local-docker"
      templates:
      - connector:
          # Using the attach method, you probably don't need to expose the JNLP port.
          attach:
            user: "jenkins"
        dockerTemplateBase:
          image: "jenkins/jnlp-slave"
        labelString: "local-docker-agent"
        pullStrategy: PULL_ALWAYS
        pullTimeout: 300
        remoteFs: "/home/jenkins"
        removeVolumes: true

# This is commented out because we pass it using an environment variable to the
# Jenkins start-up scripts in the container.
##  slaveAgentPort: 50000


security:
  apiToken:
    creationOfLegacyTokenEnabled: false
    tokenGenerationOnCreationEnabled: false
    usageStatisticsEnabled: true
  sSHD:
    port: -1
# the following is only for jenkins <2.165
##  remotingCLI:
##    enabled: false


##credentials:
##  system:
##    domainCredentials:
##      - credentials:
##          - string:
##              scope: GLOBAL
##              id: slack-token
##              secret: "${SLACK_TOKEN}"
##              description: Slack token


unclassified:
  location:
    adminAddress: "address not configured yet <nobody@nowhere>"
    url: "http://localhost:8080/"

  gitHubPluginConfig:
    hookUrl: "http://localhost:8080/github-webhook/"

  buildStepOperation:
    enabled: false
  defaultFolderConfiguration:
    healthMetrics:
    - worstChildHealthMetric:
        recursive: true
  gitSCM:
    createAccountBasedOnEmail: false
    showEntireCommitSummaryInChanges: false
    useExistingAccountWithSameEmail: false
  mailer:
    charset: "UTF-8"
    useSsl: false
  mavenModuleSet:
    localRepository: "default"
  pollSCM:
    pollingThreadCount: 10
  timestamperConfig:
    allPipelines: false
    elapsedTimeFormat: "'<b>'HH:mm:ss.S'</b> '"
    systemTimeFormat: "'<b>'HH:mm:ss'</b> '"
  upstream:
    globalUpstreamFilterStrategy: UseOldest
  whitelist:
    enabled: false
##  artifactorybuilder:
##    useCredentialsPlugin: true
##    artifactoryServers:
##      - serverId: artifactory
##        artifactoryUrl: http://acme.com/artifactory
##        resolverCredentialsConfig:
##          username: artifactory_user
##          password: ${ARTIFACTORY_PASSWORD}
##  slackNotifier:
##     teamDomain: <your-slack-workspace-name> # i.e. your-company (just the workspace name not the full url)
##       tokenCredentialId: slack-token

